Collection framework
---------------------
Collection itself is object.
It holds either similar types of objects or different types of object.
It means collection can be homogeneous as well as heterogeneous.
In most cases collection will be homogeneous.



public class Employee 
{
	private int eid;
	private String name;
	private String department;
	private int salary;
	public Employee()
	{
		
	}
	public Employee(int eid,String name,String department,int salary)
	{
		this.eid=eid;
		this.name=name;
		this.department=department;
		this.salary=salary;
	}
	public int getEid() {
		return eid;
	}
	public void setEid(int eid) {
		this.eid = eid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	
	public String toString()
	{
		return "Employee [eid=" + eid + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}
	
	
}


main
-----
public class App 
{
	public static void main(String[] args) 
	{
		ArrayList<Employee> list=new ArrayList<Employee>();
		
		
		//this is a homogeneous type of object
//		Employee [] emp1=new Employee[3];
//		emp1[0]=new Integer(10);  //showing error because it can store homogeneous array only
//		emp1[1]=new Employee(101,"AAA","sales",30000);
//		
//		Object[] emp2=new Object[3]; //this is parent of all the object class
//									//it can store refrence of any type of object
//		emp2[0]=new Integer(10);
//		emp2[1]=new Employee(101,"AAA","Sales",25000);  
//		
		//This object of parent of all the objects hence it can store any type of object refrence
		
		
	}

}



If your programme is keeping refrences of objects into collection then,by using methods of collection your programme can perform following operations on the list of  objects.

1)Adding new objects/elements into collection any time.
2)Removing elements from the collection
3)Searching elements
4)Sorting elements
5)Iterating elements
6)Updating elements








public class Employee 
{
	private int eid;
	private String name;
	private String department;
	private int salary;
	public Employee()
	{
		
	}
	public Employee(int eid,String name,String department,int salary)
	{
		this.eid=eid;
		this.name=name;
		this.department=department;
		this.salary=salary;
	}
	public int getEid() {
		return eid;
	}
	public void setEid(int eid) {
		this.eid = eid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	
	public String toString()
	{
		return "Employee [eid=" + eid + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}
	
	
}

main
-----
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

public class App 
{
	public static void main(String[] args) 
	{
		ArrayList<Employee> list=new ArrayList<Employee>();//this will be homogeneous
		list.add(new Employee(101,"Amit","Sales",50000)); //this will store refrence of the object
		list.add(new Employee(102,"Kapil Mishra","Sales",45000));
		list.add(new Employee(103,"Mohan Kumar","Marketing",25000));
		list.add(new Employee(104,"Raju Kumar","HR",56000));
		
//		Employee emp=list.get(3);
//		Employee emp1=list.get(0);
//		System.out.println(list);
//		System.out.println(emp);
//		System.out.println(emp1);
		//showing details of all Employee
		//this is the code to show the employee data in ascending order
		Collections.sort(list,(o1,o2)->o1.getSalary()-o2.getSalary());
		for(Employee emp:list)
		{
			System.out.println(emp);
		}
	}
}



java.util package contains classes and interfaces.Few of them are as follows

1)Collection interface
2)List interface
3)Set Interface
4)Map interface
5)ArrayList Class
6)LinkedList class
7)Vector Class
8)HashSet Class
9)HashMap class 
etc.

our programme will create objects of above classes as per need.
This objects will be known as Collection.