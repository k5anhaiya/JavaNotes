constructor:
-----------
syntax:
-------

public classname();
{

}

it is a special type method.
1).it has same name as the class name.
2).it has no return type.

Rule: Every class must have atleast one constructor.

Without constructor class can not be Instantiated.

Instantiation:
-------------
Construction of the object from the class is known as instantiation of the class.

This is called instantiation because every object is an instance of the class.

-->Constructor is called automatically each time object is created.
-->code to create object also contains code to call constructor.

Inside Constructor: we write code
------------------
initialization of the object.
constructor should contain code to initialize object.
it means code should be written to assign value to the instance variable.

on creation of object two things happens:
-----------------------------------------
1).Memory allocation: instance varibale will be created.
2).initialization: value will be assigned to the instance varible through constructor.

public class AA
{

private int x; //instance varibale or non static variable.
private static int y; //class varibale or static variable.

}

static variable: only one copy of the variable is created in memory.These are created when class is loaded in memory.
Non-static variable:these varibales are created each time object is created.

Types of constructor:
---------------------
1).Default constructor: it is a non-parameterized constructor inserted into class by compiler.compiler inserts  the default constructor when source code of the class  does not has any constructor.

Template
-------

public class Product 
{
	private int pid;   //default value=0
	private String name;   //null
	private double price;  //0.0
	
	public void showDetails()
	{
		System.out.println("Product id is:"+pid);
		System.out.println("Product name is:"+name);
		System.out.println("Product price is:"+price);
	}

}

Main
-----

public class productApp 
{
	public static void main(String[] args) 
	{
	Product obj=new Product();
	obj.showDetails();
	}

}

since their is no any constructor in the source code hence default constructor will be called and default values will be assigned to the instance variables.

2).parameterized constructor:
-----------------------------
when we have to  pass the parameter then it is called parameterized constructor:-

template
-------
public class Product 
{
	private int pid;   
	private String name;   
	private double price;
	
	public Product(int pid,String name,double price) //parameterized constructor
	{
	this.pid=pid;
	this.name=name;
	this.price=price;
	}
	
	public void showDetails()
	{
		System.out.println("Product id is:"+pid);
		System.out.println("Product name is:"+name);
		System.out.println("Product price is:"+price);
	}

}

main
-----

public class productApp 
{
	public static void main(String[] args) 
	{
	Product obj=new Product(101,"Laptop",5300);
	Product obj1=new Product(102,"Mouse",300);
	obj.showDetails();
	obj1.showDetails();
	}

}


3). copy constructor: it is also a parameterized constructor but due to copy task is popular as copy constructor. it copies data of one object to other.

template:

public class Product 
{
	private int pid;   
	private String name;   
	private double price;
	
	public Product(int pid,String name,double price) //parameterized constructor
	{
	this.pid=pid;
	this.name=name;
	this.price=price;
	}
	
	public Product(Product obj)  //this is a copy constructor
	{
	this.pid=obj.pid;
	this.name=obj.name;
	this.price=obj.price;
	}
	
	public void showDetails()
	{
		System.out.println("Product id is:"+pid);
		System.out.println("Product name is:"+name);
		System.out.println("Product price is:"+price);
	}

}
 main:
-------


public class productApp 
{
	public static void main(String[] args) 
	{
	Product obj=new Product(101,"Laptop",5300);
	//i want to copy the first object to second object1
	Product obj1=new Product(obj);
	obj.showDetails();
	obj1.showDetails();
	}

}

Constructor overloading:
------------------------
Defining more than one constructor inside any class is known as constructor overloading.


//following rules  must be followed in constructor overloading:
1).Number of parameter inside constructor should be different.
2).Data Type should be different.
3).sequence of parameters should be different.

if datatype of parameter is class then in the method you need to pass refrence of the class object.