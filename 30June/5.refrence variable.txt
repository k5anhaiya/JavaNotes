refrence of the object
----------------------
Every object in memory is uniquely identified by an id . this unique id is generated by jvm. and returned to
the programme.This id will be used by programme to access object. This id is known as refrence of the object.

programme must keep this id in a variable to use it. this variable  is known as REFRENCE VARIABLE.

code to create this variable should be written by us.

Data type of this variable should be that class from which object is created . This variable is known as 
refrence variables.

ex:


public class refrenceVariable 
{
	public int num;
	public refrenceVariable(int n)
	{
		num=n;
	}
}



Main()
------


public class refrenceVariableApp 
{
	public static void main(String[] args) 
	{    
		refrenceVariable p1,p2,p3; //code to create the refrence variable.here p1,p2,p3 are the refrnce 
		//variable , refrence variable is used to store the refrence id of the object.
		p1=new refrenceVariable(10);  //code to create the object.when object will be created a refrence id
		//will be generated and this refrence id will be stored in the refrence variable.
		p2=new refrenceVariable(90);  //code to create the object.
		p3=new refrenceVariable(40);  //code to create the object.
		
		/*System.out.println(num);*/ //this line shows error because refrence of num is not provided.
		System.out.println(p1.num);
		System.out.println(p2.num);
		System.out.println(p3.num);
	}
}


if the method is static inside the template then we need to pass the parameter which
will store the object refrence.


public class cal 
{
	int x,y,z;
	public cal(int a1,int a2)
	{
	x=a1;
	y=a2;
	}
	
	public static void add(cal r)  //here method is static hence we need to give the refrence of the object
	//hence we are passing the refrence parameter.
	{
		r.z=r.x+r.y;
		System.out.println("add="+r.z);
	}
	public static void multiply(cal m)
	{
		m.z=m.x*m.y;
		System.out.println("multiply="+m.z);
	}
}

main
-----

public class calApp 
{
	public static void main(String[] args) 
	{
		cal c1,c2,c3;    //these are the refrence variable
		c1=new cal(10,20);
		c2=new cal(4,7);
		c3=new cal(5,210);
		
		cal.add(c1);  //code to call add method
		cal.add(c2);
		cal.add(c3);
		cal.multiply(c1);    //code to call multiply method.
		cal.multiply(c2);
		cal.multiply(c3);
	}
}


if the method is non-static then we do not need to pass the parameter to store the 
refrence of the object constructor will automatically store this.


public class cal1 
{
	int x,y,z;
	public cal1(int a1,int a2)
	{
	x=a1;
	y=a2;
	}
	
	public void add()  //here method is non static hence we don't need to give the refrence of the object
	//constructor will automatically give the refrence of the object
	{
		z=x+y;   //compiler work like this.z=this.x+this.y;
		System.out.println("add="+z);
	}
	public void multiply()   
	{
		z=x*y;
		System.out.println("multiply="+z);
	}
}

main
----

public class cal1App 
{
	public static void main(String[] args) 
	{
		cal1 c1,c2,c3;    //these are the refrence variable
		c1=new cal1(10,20);
		c2=new cal1(4,7);
		c3=new cal1(5,210);
		
		c1.add();  //value of c1 will be assigned to this
		c2.add();
		c3.add();
		c1.multiply();    //value of c1 will be assigned to this.
		c2.multiply();
		c3.multiply();
	}
}

 
refrence_of_the_object.variable


this
-----
it is a keyword and used as refernce variable.
it is used internally. we can also use it.
it can be used only inside non-static method.
when method is called then refrence given to method assigned to this.